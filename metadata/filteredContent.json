{
  "timestamp": "2025-02-18T03:36:54.058Z",
  "files": [
    {
      "path": "app/globals.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 0, 0, 0;\n    --background-end-rgb: 0, 0, 0;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
    },
    {
      "path": "app/layout.tsx",
      "content": "import './globals.css';\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  );\n}"
    },
    {
      "path": "app/page.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Monitor, Gauge } from \"lucide-react\";\nimport { Slider } from \"@/components/ui/slider\";\n\n// Utility functions for color classification\nconst isPrime = (num: number): boolean => {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst PRIME_COLORS = Array.from({ length: 256 }, (_, i) => i).filter(isPrime);\nconst isOdd = (num: number): boolean => num % 2 === 1;\nconst isEven = (num: number): boolean => num % 2 === 0;\n\ntype PixelGroup = {\n  type: 'odd' | 'even' | 'prime';\n  colors: number[];\n  size: number;\n};\n\nexport default function Home() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isAnimating, setIsAnimating] = useState(true);\n  const [speed, setSpeed] = useState([30]); // Default 30 FPS\n  const lastFrameTime = useRef(0);\n  const pixelGroups = useRef<Map<string, PixelGroup>>(new Map());\n\n  const getRandomColor = (type?: 'odd' | 'even' | 'prime'): number => {\n    if (type === 'odd') {\n      return Array.from({ length: 256 }, (_, i) => i).filter(isOdd)[\n        Math.floor(Math.random() * 128)\n      ];\n    } else if (type === 'even') {\n      return Array.from({ length: 256 }, (_, i) => i).filter(isEven)[\n        Math.floor(Math.random() * 128)\n      ];\n    } else if (type === 'prime') {\n      return PRIME_COLORS[Math.floor(Math.random() * PRIME_COLORS.length)];\n    }\n    return Math.floor(Math.random() * 256);\n  };\n\n  const findConnectedGroups = (\n    pixels: Uint8ClampedArray,\n    width: number,\n    height: number\n  ) => {\n    const visited = new Set<number>();\n    const groups = new Map<string, PixelGroup>();\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const idx = (y * width + x) * 4;\n        if (visited.has(idx)) continue;\n\n        const color = pixels[idx];\n        let type: 'odd' | 'even' | 'prime' = 'odd';\n        \n        if (isPrime(color)) type = 'prime';\n        else if (isEven(color)) type = 'even';\n\n        const group: PixelGroup = { type, colors: [color], size: 1 };\n        const stack = [[x, y]];\n        visited.add(idx);\n\n        while (stack.length > 0) {\n          const [cx, cy] = stack.pop()!;\n          const neighbors = [\n            [cx - 1, cy],\n            [cx + 1, cy],\n            [cx, cy - 1],\n            [cx, cy + 1],\n          ];\n\n          for (const [nx, ny] of neighbors) {\n            if (\n              nx >= 0 && nx < width &&\n              ny >= 0 && ny < height\n            ) {\n              const nIdx = (ny * width + nx) * 4;\n              if (visited.has(nIdx)) continue;\n\n              const nColor = pixels[nIdx];\n              const canMerge = (\n                (type === 'odd' && isOdd(nColor)) ||\n                (type === 'even' && isEven(nColor)) ||\n                (type === 'prime' && isPrime(nColor))\n              );\n\n              if (canMerge) {\n                stack.push([nx, ny]);\n                visited.add(nIdx);\n                group.colors.push(nColor);\n                group.size++;\n              }\n            }\n          }\n        }\n\n        const groupId = `${x}-${y}`;\n        groups.set(groupId, group);\n      }\n    }\n\n    return groups;\n  };\n\n  const generateRandomPixels = (ctx: CanvasRenderingContext2D) => {\n    const imageData = ctx.createImageData(240, 240);\n    const data = imageData.data;\n\n    // Generate initial random pixels\n    for (let i = 0; i < data.length; i += 4) {\n      const colorIndex = getRandomColor();\n      data[i] = colorIndex;     // Red (using as color index)\n      data[i + 1] = colorIndex; // Green (same value for grayscale)\n      data[i + 2] = colorIndex; // Blue (same value for grayscale)\n      data[i + 3] = 255;        // Alpha\n    }\n\n    // Find and process connected groups\n    const groups = findConnectedGroups(data, 240, 240);\n    pixelGroups.current = groups;\n\n    // Apply special conflict rule\n    groups.forEach((group, groupId) => {\n      if (group.type !== 'prime') {\n        let hasConflict = false;\n        groups.forEach((otherGroup) => {\n          if (\n            otherGroup.type === 'prime' &&\n            otherGroup.size > group.size\n          ) {\n            hasConflict = true;\n          }\n        });\n\n        if (hasConflict) {\n          // Change all pixels in the group to random colors\n          const [x, y] = groupId.split('-').map(Number);\n          const startIdx = (y * 240 + x) * 4;\n          for (let i = 0; i < group.size; i++) {\n            const idx = startIdx + i * 4;\n            const newColor = getRandomColor();\n            data[idx] = newColor;\n            data[idx + 1] = newColor;\n            data[idx + 2] = newColor;\n          }\n        }\n      }\n    });\n\n    ctx.putImageData(imageData, 0, 0);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    let animationFrameId: number;\n\n    const animate = (currentTime: number) => {\n      if (!isAnimating) return;\n\n      animationFrameId = requestAnimationFrame(animate);\n\n      const deltaTime = currentTime - lastFrameTime.current;\n      const frameInterval = 1000 / speed[0];\n\n      if (deltaTime >= frameInterval) {\n        generateRandomPixels(ctx);\n        lastFrameTime.current = currentTime - (deltaTime % frameInterval);\n      }\n    };\n\n    animationFrameId = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n    };\n  }, [isAnimating, speed]);\n\n  return (\n    <div className=\"min-h-screen bg-black flex flex-col items-center justify-center p-4\">\n      <div className=\"bg-zinc-900 p-8 rounded-lg shadow-2xl max-w-fit\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Monitor className=\"w-5 h-5 text-zinc-400\" />\n            <h1 className=\"text-zinc-400 font-mono text-sm\">Pixel Display</h1>\n          </div>\n          <button\n            onClick={() => setIsAnimating(prev => !prev)}\n            className=\"px-3 py-1 text-xs font-mono bg-zinc-800 text-zinc-400 rounded hover:bg-zinc-700 transition-colors\"\n          >\n            {isAnimating ? \"PAUSE\" : \"PLAY\"}\n          </button>\n        </div>\n        <div className=\"relative\">\n          <canvas\n            ref={canvasRef}\n            width={240}\n            height={240}\n            className=\"border border-zinc-800 rounded\"\n            style={{\n              imageRendering: \"pixelated\",\n              width: \"480px\",\n              height: \"480px\",\n            }}\n          />\n          <div className=\"absolute inset-0 pointer-events-none rounded border-t border-white/5\"></div>\n        </div>\n        <div className=\"mt-6 space-y-2\">\n          <div className=\"flex items-center gap-2 text-zinc-400\">\n            <Gauge className=\"w-4 h-4\" />\n            <span className=\"text-xs font-mono\">Speed Control ({speed[0]} FPS)</span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-xs font-mono text-zinc-500\">1</span>\n            <Slider\n              value={speed}\n              onValueChange={setSpeed}\n              min={1}\n              max={60}\n              step={1}\n              className=\"w-[200px]\"\n            />\n            <span className=\"text-xs font-mono text-zinc-500\">60</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "path": "components.json",
      "content": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  }\n}"
    },
    {
      "path": "hooks/use-toast.ts",
      "content": "'use client';\n\n// Inspired by react-hot-toast library\nimport * as React from 'react';\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST'];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType['UPDATE_TOAST'];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType['DISMISS_TOAST'];\n      toastId?: ToasterToast['id'];\n    }\n  | {\n      type: ActionType['REMOVE_TOAST'];\n      toastId?: ToasterToast['id'];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  };\n}\n\nexport { useToast, toast };"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}"
    },
    {
      "path": "next.config.js",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: { unoptimized: true },\n};\n\nmodule.exports = nextConfig;"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"nextjs\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@hookform/resolvers\": \"^3.9.0\",\n    \"@next/swc-wasm-nodejs\": \"13.5.1\",\n    \"@radix-ui/react-accordion\": \"^1.2.0\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.1\",\n    \"@radix-ui/react-aspect-ratio\": \"^1.1.0\",\n    \"@radix-ui/react-avatar\": \"^1.1.0\",\n    \"@radix-ui/react-checkbox\": \"^1.1.1\",\n    \"@radix-ui/react-collapsible\": \"^1.1.0\",\n    \"@radix-ui/react-context-menu\": \"^2.2.1\",\n    \"@radix-ui/react-dialog\": \"^1.1.1\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.1\",\n    \"@radix-ui/react-hover-card\": \"^1.1.1\",\n    \"@radix-ui/react-label\": \"^2.1.0\",\n    \"@radix-ui/react-menubar\": \"^1.1.1\",\n    \"@radix-ui/react-navigation-menu\": \"^1.2.0\",\n    \"@radix-ui/react-popover\": \"^1.1.1\",\n    \"@radix-ui/react-progress\": \"^1.1.0\",\n    \"@radix-ui/react-radio-group\": \"^1.2.0\",\n    \"@radix-ui/react-scroll-area\": \"^1.1.0\",\n    \"@radix-ui/react-select\": \"^2.1.1\",\n    \"@radix-ui/react-separator\": \"^1.1.0\",\n    \"@radix-ui/react-slider\": \"^1.2.0\",\n    \"@radix-ui/react-slot\": \"^1.1.0\",\n    \"@radix-ui/react-switch\": \"^1.1.0\",\n    \"@radix-ui/react-tabs\": \"^1.1.0\",\n    \"@radix-ui/react-toast\": \"^1.2.1\",\n    \"@radix-ui/react-toggle\": \"^1.1.0\",\n    \"@radix-ui/react-toggle-group\": \"^1.1.0\",\n    \"@radix-ui/react-tooltip\": \"^1.1.2\",\n    \"@types/node\": \"20.6.2\",\n    \"@types/react\": \"18.2.22\",\n    \"@types/react-dom\": \"18.2.7\",\n    \"autoprefixer\": \"10.4.15\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.0.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"embla-carousel-react\": \"^8.3.0\",\n    \"eslint\": \"8.49.0\",\n    \"eslint-config-next\": \"13.5.1\",\n    \"input-otp\": \"^1.2.4\",\n    \"lucide-react\": \"^0.446.0\",\n    \"next\": \"13.5.1\",\n    \"next-themes\": \"^0.3.0\",\n    \"postcss\": \"8.4.30\",\n    \"react\": \"18.2.0\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"18.2.0\",\n    \"react-hook-form\": \"^7.53.0\",\n    \"react-resizable-panels\": \"^2.1.3\",\n    \"recharts\": \"^2.12.7\",\n    \"sonner\": \"^1.5.0\",\n    \"tailwind-merge\": \"^2.5.2\",\n    \"tailwindcss\": \"3.3.3\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"typescript\": \"5.2.2\",\n    \"vaul\": \"^0.9.9\",\n    \"zod\": \"^3.23.8\"\n  }\n}"
    },
    {
      "path": "tailwind.config.ts",
      "content": "import type { Config } from 'tailwindcss';\n\nconst config: Config = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic':\n          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\nexport default config;"
    }
  ]
}